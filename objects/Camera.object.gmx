<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>singleton();

fov=45;

x=0;
y=BATTLEFIELD_SIZE;
z=BATTLEFIELD_SIZE;

xto=x;
yto=0;
zto=0;

xup=0;
yup=0;
zup=1;

// who you follow around on the overworld and look over the shoulder
// of in battle. should be an instance of Entity if you don't want
// things to break, preferably an instance of Pawn, and even more
// preferably PawnPlayer.
following=noone;
// THEORETICALLY - and this is a really big 'theoretically' -
// you could make this a multiplayer game and each client would
// be able to play the right animation and poll the right contestant
// for input based on this variable.

// In practice, this is never going to happen.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 3D stuff

d3d_start();
d3d_set_culling(true);
d3d_set_hidden(true);

// todo GMS2 requires smooth shading to be handled by the shader(s) now,
// so to make porting this to GMS2 as pain-free as possible I'd like to
// do it that way here at some point in the future too

draw_set_color(c_white);

d3d_set_projection_ext(x, y, z,
    xto, yto, zto,
    xup, yup, zup,
    fov, W/H, 1, 1000);

//vertex_submit(World.model_floor, pr_trianglelist, sprite_get_texture(b_tex_temp, 0));
// todo draw selectively based on the global mode (overworld, battle, something else)

var map=get_active_map();

vertex_submit(map.statics, pr_trianglelist, sprite_get_texture(b_tileset_exterior, 0));

for (var i=0; i&lt;ds_list_size(map.list_dynamic); i++){
    var ent=map.list_dynamic[| i];
    script_execute(ent.render, ent, ent.xx, ent.yy, ent.zz);
}

// i suppose you could also just say with (BattleDrawable) but it's possible that
// you want some of them to be hidden or something
/*
for (var i=0; i&lt;ds_list_size(Battle.drawables); i++){
    with (Battle.drawables[| i]){
        bg_draw_drawable();
    }
}

with (BattleAnimator){
    script_execute(script);
}
*/
/*
 * less-important effects go on top of everything else because the depth buffer is weird
 */

with (WorldEffect){
    script_execute(render);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
