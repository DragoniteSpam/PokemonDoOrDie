<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>singleton();

var f=file_text_open_write(LOG_FILE);
file_text_close(f);

message_text="";
message_text_t=0;

var t0=get_timer();

// pawn stuff

all_class_battle_bgm=const_class_battle_bgm();
all_class_victory_bgm=const_class_victory_bgm();
all_class_intro_me=const_class_intro_me();
all_class_battle_sprites=const_class_battle_sprites();

// core stuff

all_evolution_methods=const_evolution_methods();            // dependencies: nothing
all_egg_groups=const_egg_groups();                          // dependencies: nothing
all_item_pockets=const_item_pockets();                      // dependencies: nothing
all_natures=const_natures();                                // dependencies: nothing

all_types=pbs_read_types(".\data\pbs\types.txt");           // dependencies: nothing
all_abilities=pbs_read_abilities(".\data\pbs\abilities.txt");// dependencies: nothing

all_moves=pbs_read_moves(".\data\pbs\moves.txt");           // dependencies: types
all_items=pbs_read_items(".\data\pbs\items.txt");           // dependencies: moves
all_pokemon=pbs_read_pokemon(".\data\pbs\monsters.txt");    // dependencies: moves, types, evolutions, items, abilities

all_trainer_classes=pbs_read_trainer_classes(".\data\pbs\trainertypes.txt");// dependencies: pawn stuff
all_trainers=pbs_read_trainers(".\data\pbs\trainers.txt");  // dependencies: natures, abilities, moves, items, pok√©mon, trainer classes

debug("data init took "+string((get_timer()-t0)/MILLION)+" seconds");

// color values came from bulbapedia
all_types[Types.NORMAL].color=$A8A878;
all_types[Types.FIGHTING].color=$C03028;
all_types[Types.FLYING].color=$A890F0;
all_types[Types.POISON].color=$A040A0;
all_types[Types.GROUND].color=$E0C068;
all_types[Types.ROCK].color=$B8A038;
all_types[Types.GHOST].color=$A8B820;
all_types[Types.STEEL].color=$705898;
all_types[Types.FIRE].color=$B8B8D0;
all_types[Types.WATER].color=$F08030;
all_types[Types.GRASS].color=$6890F0;
all_types[Types.ELECTRIC].color=$78C850;
all_types[Types.PSYCHIC].color=$F8D030;
all_types[Types.ICE].color=$F85888;
all_types[Types.DRAGON].color=$98D8D8;
all_types[Types.DARK].color=$705848;
//all_types[Types.FAIRY].color=$EE99AC; // fairy not implemented in the pbs but you can add it if you want
all_types[Types.QMARKS].color=$68A090;

/*
 * finish up the init stuff
 */

dt=0;
instance_deactivate_object(Struct);
instance_deactivate_object(BattlePokemon);

/*
 * Settings
 */

use_scaled_exp=true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// more misc constants and enums

enum vec2 {
    xx, yy
}

enum vec3 {
    xx, yy, zz
}

enum vec4 {
    r, g, b, a
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dt=delta_time/1000000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// UI stuff

draw_surface(application_surface, 0, 0);

with (Effect){
    script_execute(render);
}

var text_box_start_x=0;
var text_box_start_y=room_height-UI_TEXT_BOX_HEIGHT;

draw_rectangle_9s(spr_window9s_hgss, text_box_start_x, text_box_start_y, UI_TEXT_BOX_WIDTH, UI_TEXT_BOX_HEIGHT);

draw_set_font(FPokemonMedium);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);

var message_length=string_length(message_text);

draw_text_ext(text_box_start_x+UI_TEXT_BOX_OFFSET_W, text_box_start_y+UI_TEXT_BOX_OFFSET_H, string_copy(message_text, 1, message_text_t), -1, UI_TEXT_WIDTH);

for (var i=0; i&lt;ds_list_size(Battle.drawables); i++){
    with (Battle.drawables[| i].hud){
        bg_draw_hud();
    }
}

message_text_t=min(message_length, ++message_text_t);

if (message_text_t==message_length){
    // among other things, this probably needs to have a period of one second instead of two,
    // and probably should be placed underneath the final line of text
    /*if (current_second%2==0){
        draw_sprite_ext(spr_select, 0, room_width-2*UI_TEXT_BOX_OFFSET_W, room_height-2*UI_TEXT_BOX_OFFSET_H, 2, 2, 270, c_white, 1);
    }*/
    if (Battle.input_processing!=noone){
        battle_input_processing();
    }
}

/*
 * Game Maker gurus do not like game logic in the Draw event.
 * I do not like Game Maker gurus. Actually, yes I do. But I don't
 * like their stance on game logic in the Draw event, at least,
 * not when there's only one active view. In libgdx and probably
 * some other frameworks/engines they're basically the same thing.
 *
 * By the way, don't use more than one view in this game unless
 * you have a really good idea about what you're doing, you'll 
 * most probably break things.
 */

if (Battle.input_ready){
    // if input processing is going on, the action button is handled in the script that draws the options on the screen, 'cause i'm a good engineer
    if (keyboard_check_released(vk_enter)&amp;&amp;Battle.input_processing==noone){
        if (message_text_t&lt;message_length){
            message_text_t=message_length;
        } else {
            clear();
            with (Battle){
                battle_advance();
            }
        }
    }
} else {
    with (Battle){
        battle_process();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
