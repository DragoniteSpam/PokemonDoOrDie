<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>singleton();

/*
 * Everything in here is designed to make it easy(er) to
 * create reconfigure-able controls. Default controls act as if
 * you were playing with a gamepad, even if you're not; more
 * inputs can be added fairly easily.
 * Pay no attention to
 * any of this unless you want to change which buttons do what.
 */

gamepad_get_axis_deadzone(0.15);
gamepad_set_button_threshold(0, 0.5);

// Joystick information
rs_angle=0;
ls_angle=0;
dpad_angle=0;
rs_magnitude=0;
ls_magnitude=0;
rs_x=0;
rs_y=0;
ls_x=0;
ls_y=0;

// Change in joystick information
d_rs_angle=0;
d_ls_angle=0;
d_dpad_angle=0;
d_rs_magnitude=0;
d_ls_magnitude=0;
d_ls_x=0;
d_ls_y=0;
d_rs_x=0;
d_rs_y=0;

// General
hasInput=false;
pressInput=false;
releaseInput=false;

up=false;
down=false;
left=false;
right=false;
a=false;
b=false;
x=false;
y=false;
l=false;
r=false;
l2=false;
r2=false;
ls=false;
rs=false;
rup=false;
rdown=false;
rleft=false;
rright=false;
pup=false;
pdown=false;
pleft=false;
pright=false;
start=false;
select=false;

// Previous input
last_up=false;
last_down=false;
last_left=false;
last_right=false;
last_a=false;
last_b=false;
last_x=false;
last_y=false;
last_l=false;
last_r=false;
last_l2=false;
last_r2=false;
last_ls=false;
last_rs=false;
last_rup=false;
last_rdown=false;
last_rleft=false;
last_rright=false;
last_pup=false;
last_pdown=false;
last_pleft=false;
last_pright=false;
last_start=false;
last_select=false;

// Change input
press_up=false;
press_down=false;
press_left=false;
press_right=false;
press_a=false;
press_b=false;
press_x=false;
press_y=false;
press_l=false;
press_r=false;
press_l2=false;
press_r2=false;
press_ls=false;
press_rs=false;
press_rup=false;
press_rdown=false;
press_rleft=false;
press_rright=false;
press_pup=false;
press_pdown=false;
press_pleft=false;
press_pright=false;
press_start=false;
press_select=false;

release_up=false;
release_down=false;
release_left=false;
release_right=false;
release_a=false;
release_b=false;
release_x=false;
release_y=false;
release_l=false;
release_r=false;
release_l2=false;
release_r2=false;
release_ls=false;
release_rs=false;
release_rup=false;
release_rdown=false;
release_rleft=false;
release_rright=false;
release_pup=false;
release_pdown=false;
release_pleft=false;
release_pright=false;
release_start=false;
release_select=false;

// Common terms
interact=a;
back=b||select;
pause=x||start;
run=l2;
jump=y;
sneak=r2;

last_interact=false;
last_back=false;
last_pause=false;
last_run=false;
last_jump=false;
last_sneak=false;

press_interact=false;
press_back=false;
press_pause=false;
press_run=false;
press_jump=false;
press_sneak=false;

release_interact=false;
release_back=false;
release_pause=false;
release_run=false;
release_jump=false;
release_sneak=false;

// Labels
cn[JS.LEFT]="Left Stick Left";
cn[JS.RIGHT]="Left Stick Right";
cn[JS.UP]="Left Stick Up";
cn[JS.DOWN]="Left Stick Down";
cn[JS.A]="A";
cn[JS.B]="B";
cn[JS.X]="X";
cn[JS.Y]="Y";
cn[JS.START]="Start";
cn[JS.SELECT]="Select";
cn[JS.LT]="L";
cn[JS.RT]="R";
cn[JS.L2]="L2";
cn[JS.R2]="R2";
cn[JS.LS]="Left Stick";
cn[JS.RS]="Right Stick";
cn[JS.RUP]="Right Stick Up";
cn[JS.RDOWN]="Right Stick Down";
cn[JS.RLEFT]="Right Stick Left";
cn[JS.RRIGHT]="Right Stick Right";
cn[JS.PUP]="D-Pad Up";
cn[JS.PDOWN]="D-Pad Down";
cn[JS.PLEFT]="D-Pad Left";
cn[JS.PDOWN]="D-Pad Down";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Joystick/gamepad constants
enum JS {
    UP,
    DOWN,
    LEFT,
    RIGHT,
    A,
    B,
    X,
    Y,
    START,
    SELECT,
    LT,
    RT,
    L2,
    R2,
    LS,
    RS,
    PUP,
    PDOWN,
    PLEFT,
    PRIGHT,
    RUP,
    RDOWN,
    RLEFT,
    RRIGHT
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Compass directions
enum CompassDirections {
    east=0,
    northeast=45,
    north=90,
    northwest=135,
    west=180,
    southwest=225,
    south=270,
    southeast=315,
    no=400
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
 * Everything in here is designed to make it easy(er) to
 * create reconfigure-able controls. Default controls act as if
 * you were playing with a gamepad, even if you're not; more
 * inputs can be added fairly easily.
 * Pay no attention to
 * any of this unless you want to change which buttons do what.
 */

// Shift input to previous input
var lastL=ls_angle;
var lastR=rs_angle;
var lastP=dpad_angle;
var lastInput=hasInput;
var lastLM=ls_magnitude;
var lastRM=rs_magnitude;
var lastRSX=rs_x;
var lastRSY=rs_y;
var lastLSX=ls_x;
var lastLSY=ls_y;

last_up=up;
last_down=down;
last_left=left;
last_right=right;
last_a=a;
last_b=b;
last_x=x;
last_y=y;
last_l=l;
last_r=r;
last_l2=l2;
last_r2=r2;
last_ls=ls;
last_rs=rs;
last_rup=rup;
last_rdown=rdown;
last_rleft=rleft;
last_rright=rright;
last_pup=pup;
last_pdown=pdown;
last_pleft=pleft;
last_pright=pright;
last_start=start;
last_select=select;

last_interact=interact;
last_back=back;
last_pause=pause;
last_run=run;
last_jump=jump;
last_sneak=sneak;

// todo get rid of the hard-coded input constants/characters and
// instead make them configurable settings (World.settings.input)

if (get_controller()){
    // If controller, gather raw input first. Can't be done all in one call because different buttons have
    // different functions to check them.
    ls_x=gamepad_axis_value(0, gp_axislh);
    ls_y=gamepad_axis_value(0, gp_axislv);
    ls_angle=get_stick_angle(ls_x, ls_y);
    ls_magnitude=get_stick_magnitude(ls_x, ls_y);
    up=match_cardinal_direction(ls_angle, ls_magnitude, CompassDirections.north);
    down=match_cardinal_direction(ls_angle, ls_magnitude, CompassDirections.south);
    left=match_cardinal_direction(ls_angle, ls_magnitude, CompassDirections.west);
    right=match_cardinal_direction(ls_angle, ls_magnitude, CompassDirections.east);
    a=gamepad_button_check(0, gp_face1);
    b=gamepad_button_check(0, gp_face2);
    x=gamepad_button_check(0, gp_face3);
    y=gamepad_button_check(0, gp_face4);
    start=gamepad_button_check(0, gp_start);
    select=gamepad_button_check(0, gp_select);
    l=gamepad_button_check(0, gp_shoulderlb);
    r=gamepad_button_check(0, gp_shoulderrb);
    l2=gamepad_button_check(0, gp_shoulderl);
    r2=gamepad_button_check(0, gp_shoulderr);
    ls=gamepad_button_check(0, gp_stickl);
    rs=gamepad_button_check(0, gp_stickr);
    pup=gamepad_button_check(0, gp_padu);
    pdown=gamepad_button_check(0, gp_padd);
    pleft=gamepad_button_check(0, gp_padl);
    pright=gamepad_button_check(0, gp_padr);
    rs_x=gamepad_axis_value(0, gp_axisrh);
    rs_y=gamepad_axis_value(0, gp_axisrv);
    rs_angle=get_stick_angle(rs_x, rs_y);
    rs_magnitude=get_stick_magnitude(rs_x, rs_y);
    rup=match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.north);
    rdown=match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.south);
    rleft=match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.west);
    rright=match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.east);
}

// The keyboard can gather exact input directly from the keyboard, since all button checks are the same
ls_x=ls_x-keyboard_check_direct(ord("A"))+keyboard_check_direct(ord("D"));
ls_y=ls_y-keyboard_check_direct(ord("W"))+keyboard_check_direct(ord("S"));
ls_x-=(keyboard_check_direct(vk_left)-keyboard_check_direct(vk_right));
ls_y-=(keyboard_check_direct(vk_up)-keyboard_check_direct(vk_down));
// Don't need tolerance checks here because keyboard checks are binary.
ls_angle=get_stick_angle(ls_x, ls_y);
up=up||match_cardinal_direction(ls_angle, ls_y, CompassDirections.north);
down=down||match_cardinal_direction(ls_angle, ls_y, CompassDirections.south);
left=left||match_cardinal_direction(ls_angle, ls_x, CompassDirections.west);
right=right||match_cardinal_direction(ls_angle, ls_x, CompassDirections.east);
a=a||(keyboard_check_direct(vk_enter)||mouse_check_button(mb_left));
b=b||(keyboard_check_direct(ord("J"))||mouse_check_button(mb_right));
x=x||keyboard_check_direct(ord("K"));
y=y||keyboard_check_direct(ord("L"));
start=start||keyboard_check_direct(vk_escape);
select=select||keyboard_check_direct(vk_backspace);
l=l||keyboard_check_direct(vk_lcontrol)||mouse_wheel_up();
r=r||keyboard_check_direct(vk_rcontrol)||mouse_wheel_down();
l2=l2||keyboard_check_direct(vk_lshift);
r2=r2||keyboard_check_direct(ord("Z"));
ls=ls||(keyboard_check_direct(vk_lalt)||mouse_check_button(mb_middle));
rs=rs||keyboard_check_direct(vk_ralt);
var _u=-keyboard_check_direct(vk_left)+keyboard_check_direct(vk_right);
var _r=-keyboard_check_direct(vk_up)+keyboard_check_direct(vk_down);
dpad_angle=get_stick_angle(_u, _r);
pup=pup||match_cardinal_direction(dpad_angle, _r, CompassDirections.north);
pdown=pdown||match_cardinal_direction(dpad_angle, _r, CompassDirections.south);
pleft=pleft||match_cardinal_direction(dpad_angle, _u, CompassDirections.west);
pright=pright||match_cardinal_direction(dpad_angle, _u, CompassDirections.east);
// Mouse: only check these if the cursor is locked (not on a menu or something)
// this will override the gamepad rs_x and rs_y but that's probably okay because
// you probably won't be checking these directly anyway.
rs_x=clamp((window_mouse_get_x()-window_get_width()/2)/10, -1, 1);
rs_y=clamp((window_mouse_get_y()-window_get_height()/2)/10, -1, 1);
if (World.settings.input.invert_y){
    rs_y=-rs_y;
}
if (World.settings.input.invert_x){
    rs_x=-rs_x;
}
rs_angle=get_stick_angle(rs_x, rs_y);
rs_magnitude=get_stick_magnitude(rs_x, rs_y);
rup=rup||match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.north);
rdown=rdown||match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.south);
rleft=rleft||match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.west);
rright=rright||match_cardinal_direction(rs_angle, rs_magnitude, CompassDirections.east);
// "stick" magnitudes are a binary 1 or 0 with keyboard controls,
// since you can't partially press a key.
ls_magnitude=(up||down||left||right);

if (abs(ls_x)&lt;0.1){
    ls_x=0;
}
if (abs(ls_y)&lt;0.1){
    ls_y=0;
}
if (abs(rs_x)&lt;0.1){
    rs_x=0;
}
if (abs(rs_y)&lt;0.1){
    rs_y=0;
}

// Change in stick angles
d_rs_angle=(rs_angle-lastR+360) mod 360;
d_ls_angle=(ls_angle-lastL+360) mod 360;
d_dpad_angle=(dpad_angle-lastP+360) mod 360;
d_ls_magnitude=ls_magnitude-lastLM;
d_rs_magnitude=rs_magnitude-lastRM;

// Update change input
hasInput=(up||down||left||right);
pressInput=((!lastInput)&amp;&amp;hasInput);
releaseInput=(lastInput&amp;&amp;(!hasInput));

press_up=(!last_up)&amp;&amp;up;
press_down=(!last_down)&amp;&amp;down;
press_left=(!last_left)&amp;&amp;left;
press_right=(!last_right)&amp;&amp;right;
press_a=(!last_a)&amp;&amp;a;
press_b=(!last_b)&amp;&amp;b;
press_x=(!last_x)&amp;&amp;x;
press_y=(!last_y)&amp;&amp;y;
press_l=(!last_l)&amp;&amp;l;
press_r=(!last_r)&amp;&amp;r;
press_l2=(!last_l2)&amp;&amp;l2;
press_r2=(!last_r2)&amp;&amp;r2;
press_ls=(!last_ls)&amp;&amp;ls;
press_rs=(!last_rs)&amp;&amp;rs;
press_rup=(!last_rup)&amp;&amp;rup;
press_rdown=(!last_rdown)&amp;&amp;rdown;
press_rleft=(!last_rleft)&amp;&amp;rleft;
press_rright=(!last_rright)&amp;&amp;rright;
press_pup=(!last_pup)&amp;&amp;pup;
press_pdown=(!last_rdown)&amp;&amp;pdown;
press_pleft=(!last_pleft)&amp;&amp;pleft;
press_pright=(!last_pright)&amp;&amp;pright;
press_start=(!last_start)&amp;&amp;start;
press_select=(!last_select)&amp;&amp;select;

release_up=last_up&amp;&amp;(!up);
release_down=last_down&amp;&amp;(!down);
release_left=last_left&amp;&amp;(!left);
release_right=last_right&amp;&amp;(!right);
release_a=last_a&amp;&amp;(!a);
release_b=last_b&amp;&amp;(!b);
release_x=last_x&amp;&amp;(!x);
release_y=last_y&amp;&amp;(!y);
release_l=last_l&amp;&amp;(!l);
release_r=last_r&amp;&amp;(!r);
release_l2=last_l2&amp;&amp;(!l2);
release_r2=last_r2&amp;&amp;(!r2);
release_ls=last_ls&amp;&amp;(!ls);
release_rs=last_rs&amp;&amp;(!rs);
release_rup=last_rup&amp;&amp;(!rup);
release_rdown=last_rdown&amp;&amp;(!rdown);
release_rleft=last_rleft&amp;&amp;(!rleft);
release_rright=last_rright&amp;&amp;(!rright);
release_pup=last_pup&amp;&amp;(!pup);
release_pdown=last_pdown&amp;&amp;(!pdown);
release_pleft=last_pleft&amp;&amp;(!pleft);
release_pright=last_pright&amp;&amp;(!pright);
release_start=last_start&amp;&amp;(!start);
release_select=last_select&amp;&amp;(!select);

// Update common terms
interact=a;
back=b||select;
pause=x||start;
run=l2;
jump=y;
sneak=r2;

press_interact=(!last_interact)&amp;&amp;interact;
press_back=(!last_back)&amp;&amp;back;
press_pause=(!last_pause)&amp;&amp;pause;
press_run=(!last_run)&amp;&amp;run;
press_jump=(!last_jump)&amp;&amp;jump;
press_sneak=(!last_sneak)&amp;&amp;sneak;

release_interact=last_interact&amp;&amp;(!interact);
release_back=last_back&amp;&amp;(!back);
release_pause=last_pause&amp;&amp;(!pause);
release_run=last_run&amp;&amp;(!run);
release_jump=last_jump&amp;&amp;(!jump);
release_sneak=last_sneak&amp;&amp;(!sneak);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
